# Configuration file format 4

# ******* GENERAL INFORMATION *******

experience_name: test
run_id: 1
# Seed for the randomness of the experiment
seed: 15

# ******* SCENARIO DEFINITION *******

# The number of robots in the fleet
robots_number: 6

# The model of the robot. Must match the robots names in Gazebo in the following way : {robots_model}_{i} where i = 0..{robots_number}
# Example : x500_0, x500_1, x500_2, etc.
robots_model: x500

# Length of the simulation in seconds
simulation_length: 0 # s


# ******* NETWORK PARAMETERS (ns-3) *******
wifi_type: 'SpectrumWifiPhy' # [YansWifiPhy, SpectrumWifiPhy]
propagation_loss_model: 'HybridBuildingsPropagationLossModel' # [LogDistancePropagationLossModel, HybridBuildingsPropagationLossModel], used only with YansWifiPhy
error_model_type: 'ns3::NistErrorRateModel'
phy_mode: 'ErpOfdmRate54Mbps'

# ******* NETWORK APPLICATIONS *******
mission_flow:
  enable: false
  source_robot_id: 0
  sink_robot_id: 1
  port: 7777
  packet_size: 1024 # bytes
  interval: 1800 # us
  start_traffic_time: 1.0 # s
  stop_traffic_time: 300.0 # s  

# ******* FLOCKING *******
VAT_flocking_parameters:
  v_flock: 1.5
  v_max: 1
  a_frict: 4.16
  p_frict: 3.2
  r_0_frict: 85.3
  C_frict: 0.8
  v_frict: 0.63
  p_att: 0.08
  r_0_att: 15
  p_rep: 0.13
  r_0_rep: 15
  a_shill: 53
  p_shill: 3.55
  r_0_shill: 0.3
  v_shill: 13.622
  auto_propulsion_flag: false
  secondary_objective_flag: true
  # secondary objectives of the drones, with the form robot_ID: [x, y, z]
  secondary_objectives: 
    1: [0, 40, 10]
    2: [40, 0, 10]


target_altitude: 10.0 # Flocking is done at fixed altitude for now.

neighbor_timeout_value: 1000000 # Value after which the robot will be considered as lost (microseconds)

max_neighbors: 2 # Maximum number of neighbors considered by each robot (take the best ones)

pose_broadcast_period: 5000 # us          Time between two broadcasts of current state
pose_broadcast_packet_size: 48 # bytes    Size of the broadcasted packet supposed to hold the robot's state

# ******** OBSTACLES ********

# Buildings are defined with their center (x, y), and their size in the three dimensions : (size_x, size_y, height)
auto_buildings: false # if false, "buildings" is used
distribution: uniform # [uniform, normal]
numb_obst: 7
radius_obst: 30
radius_stdev_obst: 10
height_obst: 10
arena_radius: 300
arena_center_x: 0
arena_center_y: 0

buildings:

  # - name: high_building_1
  #   x: -100
  #   y: -50
  #   height: 20
  #   size_x: 50
  #   size_y: 300
  # - name: high_building_2
  #   x: 50
  #   y: -75
  #   height: 20
  #   size_x: 50
  #   size_y: 250
  # - name: high_building_3
  #   x: 0
  #   y: 125
  #   height: 20
  #   size_x: 150
  #   size_y: 50

# ******* GAZEBO *******

world_sdf_path: /src/worlds/default.sdf
update_rate: 20000 # in Hz | The objective rate at which Gazebo tries to run simulation loops. 

# Period of the command loop of the robots (Gazebo only)
cmd_loop_period: 100000 # us

# ******* DANCERS OPTIONS *******

# Simulation timings. BE CAREFUL : sync_window must be divisible by phy_step_size, phy_step_size must be divisible by net_step_size 
# and phy_step_size must a multiple of step_length
sync_window: 100000 # in us | the duration between two position exchange and clock synchronization between physics and network simulators
phy_step_size: 100000 # in us | the duration of 1 physics simulator simulation loop
net_step_size: 5000 # in us

print_debug: true

save_compute_time: false

net_use_uds: true
phy_use_uds: true

do_driver_transfer: false

# network simulator socket: UDS
net_uds_server_address: /tmp/net_server_socket
# network simulator socket: TCP
net_ip_server_address: '127.0.0.1'
net_ip_server_port: 10000

# physics simulator socket: UDS
phy_uds_server_address: /tmp/phy_server_socket
# physics simulator socket: TCP
phy_ip_server_address: '127.0.0.1'
phy_ip_server_port: 10000

# Special variable used for Robotsim only (UDS socket connection between viragh_connector and Robotsim)
viragh_uds_server_address: /tmp/viragh_server_socket


