# Configuration file format 4

# **************************************
# ******* EXPERIMENT INFORMATION *******
# **************************************

# Name of the experiment 
experience_name: tutorial_1

# ID for this particular run
run_id: 1

# Seed for the randomness of the experiment
seed: 12 

# Length of the simulation in seconds
simulation_length: 200 # s

# **************************************
# ******** SCENARIO DEFINITION *********
# **************************************

# The number of robots in the fleet
robots_number: 4

# Position around which the robots will spawn
start_position:
  x: 0.0
  y: 0.0
  z: 10.0

# Parameter to configure the format of the exchanged messages between the 
cosimulation_mode: 'exchange_neighbors' # [exchange_neighbors, exchange_commands]

# If true, the module that invokes the controller will also publish the structs of the agents, for data harvesting 
publish_agent_structs: true

# **************************************
# ************* OBSTACLES **************
# **************************************

# Buildings are defined with their center (x, y), and their size in the three dimensions : (size_x, size_y, height)
auto_buildings: false # if false, "buildings" is used
distribution: uniform # [uniform, normal]
numb_obst: 12
radius_obst: 10
radius_stdev_obst: 1
height_obst: 25
arena_radius: 170
arena_center_x: 0
arena_center_y: 160

buildings:
  # - id: 1
  #   x: 30
  #   y: 40
  #   height: 30
  #   size_x: 20
  #   size_y: 20

  # - id: 2
  #   x: 70
  #   y: 60
  #   height: 30
  #   size_x: 20
  #   size_y: 20

# CORRIDOR
# - id: 1
#   x: -50
#   y: 0
#   height: 20
#   size_x: 50
#   size_y: 300
# - id: 2
#   x: 50
#   y: -45
#   height: 20
#   size_x: 50
#   size_y: 210
# - id: 3
#   x: 5
#   y: 125
#   height: 20
#   size_x: 60
#   size_y: 50
# - id: 4
#   x: 10
#   y: 200
#   height: 20
#   size_x: 50
#   size_y: 100
# - id: 5
#   x: 100
#   y: 150
#   height: 20
#   size_x: 50
#   size_y: 200


# **************************************
# ********** ns-3 PARAMETERS  **********
# **************************************

# Wifi parameters
wifi_type: 'SpectrumWifiPhy' # [YansWifiPhy, SpectrumWifiPhy]
propagation_loss_model: 'HybridBuildingsPropagationLossModel' # [LogDistancePropagationLossModel, HybridBuildingsPropagationLossModel], used only with YansWifiPhy
error_model_type: 'ns3::NistErrorRateModel'
phy_mode: 'HtMcs7' # 802.11g: [ErpOfdmRate54Mbps] 802.11n: [HtMcs0, HtMcs1, HtMcs2, HtMcs3, ..., HtMcs7]
short_guard_interval_supported: false
frequency: 5.2e9

# Routing parameters 
routing_algorithm: 'OLSR' # [AODV, DSDV, OLSR, BATMAN, DSR]
# Parameters for the "pseudo-routing" scheme where the routing in ns-3 is replaced with simple graph-traversal algorithms
pseudo_routing_algorithm: 'shortest_dist' # [shortest_dist, capacity_bottleneck, minimize_error_rate, predefined_chain] 
# If false, the route between source and sink, computed by the pseudo_routing_algorithm will be used to actually route the data. 
# If true, the pseudo_routing_algorithm still run, but the routing tables of the agents are handled by the routing_algorithm
use_real_routing_algorithm: false 

# Pseudo-routing algorithm specific parameters
shortest_dist:
  distance_threshold: 40 # m
  constant_before_threshold: 10

minimize_error_rate:
  broadcast_window_size: 0.5  # s

hybrid_dist_error_rate:
  distance_threshold: 60 # m
  constant_before_threshold: 10
  error_rate_exponent: 2
  distance_gain: 1
  error_rate_gain: 200

# Network applications
mission_flow:
  enable: false
  source_robot_ids: []
  sink_robot_id: 0
  port: 7777
  packet_size: 1024     # bytes
  interval: 200000      # us
  timeout: 500000       # us
  start_time: 3.0       # s
  stop_time: 2000.0     # s
  flow_id: 1
  save_packets: false

broadcast_flow:
  enable: true
  port: 4000
  packet_size: 64       # bytes
  interval: 250000      # us
  timeout: 500000       # us
  start_time: 0.0       # s
  stop_time: 2000.0     # s
  flow_id: 2

# **************************************
# ******* CONTROLLER PARAMETERS  *******
# **************************************

# *** FLOCKING ***

# Indicates if the ROS flocking_controller should publish on a topic the command its sends.
controller_publish_cmd: true

# **** Constraints ****
expected_deconnexion_distance: 130.0

# **** Parameters ****
VAT_undefined_flocking_parameters:
  v_flock: 0.5
  v_max: 3
  v_sec_max: 3
  r_0_sec: 4.0
  v_sec_max_path: 3
  r_0_sec_path: 4.0
  a_frict: 4.16
  p_frict: 3.2
  r_0_frict: 85.3
  C_frict: 0.8
  v_frict: 0.63
  p_att: 0.08  # old 0.08
  r_0_att: 5
  p_rep: 0.13
  r_0_rep: 5
  a_shill: 53
  p_shill: 3.55
  r_0_shill: 1.0 # old 0.3
  v_shill: 13.622
  auto_propulsion_flag: false
  secondary_objective_flag: true
  # If use_deconnexion_distance_instead_of_p_att is true, p_att will be overriden so that the 
  # attraction speed can counter the v_sec_max at the expected_deconnexion_distance.
  use_deconnexion_distance_instead_of_p_att: false 
  use_squared_attraction_term: false
  p_los: 0.0
  r_los_obst_inflation: 0.0

VAT_mission_flocking_parameters:
  v_flock: 1.0
  v_max: 15
  v_sec_max: 6.0
  r_0_sec: 4.0
  v_sec_max_path: 6.0
  r_0_sec_path: 4.0
  a_frict: 4.16
  p_frict: 3.2
  r_0_frict: 85.3 # old 85.3
  C_frict: 0.8
  v_frict: 0.63
  p_att: 0.16  # old 0.08
  r_0_att: 30
  p_rep: 0.13
  r_0_rep: 20
  a_shill: 53
  p_shill: 3.55
  r_0_shill: 1.0 # old 0.3
  v_shill: 13.622
  auto_propulsion_flag: false
  secondary_objective_flag: true
  use_deconnexion_distance_instead_of_p_att: true
  use_squared_attraction_term: false
  p_los: 1.0
  r_los_obst_inflation: 5.0

VAT_potential_flocking_parameters:
  v_flock: 0.5
  v_max: 3
  v_sec_max: 3
  r_0_sec: 4.0
  v_sec_max_path: 3
  r_0_sec_path: 4.0
  a_frict: 4.16
  p_frict: 3.2
  r_0_frict: 85.3
  C_frict: 5.0
  v_frict: 0.63
  p_att: 0.16  # old 0.08
  r_0_att: 30
  p_rep: 0.13
  r_0_rep: 20
  a_shill: 53
  p_shill: 3.55
  r_0_shill: 1.0 # old 0.3
  v_shill: 13.622
  auto_propulsion_flag: false
  secondary_objective_flag: true
  use_deconnexion_distance_instead_of_p_att: false
  use_squared_attraction_term: false
  p_los: 0.0
  r_los_obst_inflation: 0.0

VAT_idle_flocking_parameters:
  v_flock: 0.5
  v_max: 3
  v_sec_max: 3
  r_0_sec: 4.0
  v_sec_max_path: 3
  r_0_sec_path: 4.0
  a_frict: 4.16
  p_frict: 3.2
  r_0_frict: 85.3
  C_frict: 0.8
  v_frict: 0.63
  p_att: 0.08  # old 0.08
  r_0_att: 20
  p_rep: 0.13
  r_0_rep: 20
  a_shill: 53
  p_shill: 3.55
  r_0_shill: 1.0 # old 0.3
  v_shill: 13.622
  auto_propulsion_flag: false
  secondary_objective_flag: true
  use_deconnexion_distance_instead_of_p_att: false
  use_squared_attraction_term: false
  p_los: 0.0
  r_los_obst_inflation: 0.0

# secondary objectives of the drones, with the form robot_ID: [x, y, z, target(false)|sink(true)] 
# Be careful, there is no check that on the robot_ID in this list, if add a secondary objective for robot 10 and robot 10 does not exist, it will be ignored
secondary_objectives: 
  # 0: [-15, -40, 10, false]
  # 1: [40, 85, 10, true]
  # 2: [0, 50, 10, false]
  # 3: [40, 70, 10, false]

  # Corridor
  # 0: [0, 0, 10, true]
  # 1: [50, 250, 10, false]

  0: [0, 0, 10, true]
  1: [150, 150, 10, false]
  # 2: [-50, 50, 10, false]
  # 3: [-70, 150, 10, false]
  # 4: [200, 350, 10, false] 
  # 5: [-200, 350, 10, false]
  # 6: [340, 100, 10, false]

# target_altitude: 10.0 # Flocking is done at fixed altitude for now. If not defined, the flocking will be done in 3D.
min_altitude: 5.0 # Optional minimal altitude that, if set, will add an upward force if the UAV drops below the minimal altitude. Above this threshold, the UAV moves in 3D.

neighbor_timeout_value: 2000000 # Value after which the robot will be considered as lost (microseconds)

max_neighbors: 10 # Maximum number of neighbors considered by each robot (take the best ones)


# ******* LEADER PATH PLANNER *******
# When true, the secondary_objectives will be reached trough a A* start path planning
# When false, the agent will be attract by a direct force towards the goal.
use_planner: false

# Distance at which the planner will stop looking for closer grid cells.
goal_radius_tolerance: 1.0

# If the distance between the agent and its path is greater than distance_to_path_tolerance, the agent will replan a path.
distance_to_path_tolerance: 3.0

# Distance ahead of the closest point on the path that agent will be attract to. Similar to the carrot on a stick.
lookup_ahead_pursuit_distance: 5.0

# **** Occupancy grid for the planner ****

# Heigh of the grid in the global frame. 
grid_altitude: 10.0

# The size of the map is based on the smallest x and y position to the 
# largest x and y positions from obstalces and secondary objectives.
# The map inflation is a padding in meter to add around those dimensions.
map_inflation: 5.0

# Extra size to add on each size of obstacles for safe navigation. 
obstacle_inflation: 2.0

# Resolution in meter/cell of the occupancy grid.
map_resolution: 10.0

# ******* PRE-PLANNED FLIGHT *******
planned_trajectory:
  name: 'CIRCULAR'
  p1: 0.1
  p2: 10.0

  # name: 'INFINITY_SYMBOL'
  # p1: 10.0
  # p2: 0.1


# **************************************
# ************ STEINER TREE ************
# **************************************

stp_max_range: 20.0
stp_grid_resolution: 10.0
stp_grid_inflation: 5.0
stp_grid_altitude: 10.0
stp_obstacle_inflation: 2.0
stp_cost_function: 'piecewise_constant_exponential'
stp_solver_path: '/home/theotime/gits/scip-jack'
stp_solver_name: 'stp.linux.x86_64.gnu.opt.spx2'


# **************************************
# *************** GAZEBO ***************
# **************************************

world_sdf_path: src/physics_simulators/Gazebo/worlds/default.sdf       # (from root of ROS2 workspace)
update_rate: 20000 # in Hz | The objective rate at which Gazebo tries to run simulation loops. 

# Period of the command loop of the robots (Gazebo only)
# cmd_loop_period: 100000 # us

# The model of the robot. Must match the robots names in Gazebo in the following way : {robots_model}_{i} where i = 0..{robots_number}
# Example : x500_0, x500_1, x500_2, etc.
robots_model: x500

# **************************************
# ************ MINIDANCERS *************
# **************************************

# Prints in the mini-dancers terminal the advancement of the simulation steps
mini_dancers_print_advancement: false

publish_network_markers: true

use_localization_noise: false
localization_noise_stddev: 1.0

communication_range: 100.0 # m (only used when MiniDancers is launch in non-cosim mode)


# **************************************
# ************** ROBOTSIM **************
# **************************************

# Special variable used for Robotsim only (UDS socket connection between viragh_connector and Robotsim)
viragh_uds_server_address: /tmp/viragh_server_socket

# **************************************
# ********* DANCERS PARAMETERS *********
# **************************************

# Simulation timings. BE CAREFUL : sync_window must be divisible by phy_step_size, phy_step_size must be divisible by net_step_size 
# and phy_step_size must a multiple of step_length
sync_window: 10000 # in us | the duration between two position exchange and clock synchronization between physics and network simulators
phy_step_size: 5000 # in us | the duration of 1 physics simulator simulation loop
net_step_size: 5000 # in us

save_compute_time: false
enable_stats: false

net_use_uds: true
# network simulator socket: UDS
net_uds_server_address: /tmp/net_server_socket
# network simulator socket: TCP
net_ip_server_address: '127.0.0.1'
net_ip_server_port: 10000

phy_use_uds: true
# physics simulator socket: UDS
phy_uds_server_address: /tmp/phy_server_socket
# physics simulator socket: TCP
phy_ip_server_address: '127.0.0.1'
phy_ip_server_port: 10000
